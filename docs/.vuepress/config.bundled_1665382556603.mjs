// docs/.vuepress/config.ts
import { defineConfig4CustomTheme } from "vuepress/config";

// docs/.vuepress/config/baiduCode.ts
var baiduCode_default = "3a2a89979f0938d6ac21f967d18b9f3e";

// docs/.vuepress/config/htmlModules.ts
var htmlModule = {
  homeSidebarB: '<ins class="adsbygoogle"\n     style="display:block"\n     data-ad-client="ca-pub-8621788234752924"\n     data-ad-slot="9814056513"\n     data-ad-format="auto"\n     data-full-width-responsive="true"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n<\/script>',
  sidebarB: '<ins class="adsbygoogle"\n     style="display:block"\n     data-ad-client="ca-pub-8621788234752924"\n     data-ad-slot="8498052873"\n     data-ad-format="auto"\n     data-full-width-responsive="true"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n<\/script>',
  pageB: '</br><ins class="adsbygoogle"\n     style="display:block; text-align:center;"\n     data-ad-layout="in-article"\n     data-ad-format="auto"\n     data-ad-client="ca-pub-8621788234752924"\n     data-ad-slot="7043271566"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n<\/script>',
  pageBshowMode: "article"
};
var htmlModules_default = htmlModule;

// docs/.vuepress/config.ts
var config_default = defineConfig4CustomTheme({
  theme: "vdoing",
  locales: {
    "/": {
      lang: "zh-CN",
      title: "\u6781\u901Fcv",
      description: "CV\u64CD\u4F5C\u597D\uFF0C\u4E0B\u73ED\u5C31\u662F\u65E9\u3002"
    }
  },
  themeConfig: {
    nav: [
      { text: "\u9996\u9875", link: "/" },
      {
        text: "\u7F16\u7A0B\u57FA\u7840",
        link: "/article/"
      },
      {
        text: "Android",
        link: "/note/"
      },
      {
        text: "iOS",
        link: "/idea/"
      },
      {
        text: "\u7CFB\u7EDF\u5E73\u53F0",
        link: "/other/"
      },
      {
        text: "\u5DE5\u5177\u8F6F\u5B9E\u529B",
        link: "/favorites/"
      }
    ],
    sidebarDepth: 2,
    logo: "/img/logo.png",
    repo: "fastcv-cc",
    searchMaxSuggestions: 10,
    lastUpdated: "\u4E0A\u6B21\u66F4\u65B0",
    docsDir: "docs",
    editLinks: false,
    editLinkText: "\u7F16\u8F91",
    sidebar: "structuring",
    author: {
      name: "fastcv",
      link: "https://fastcv.cc/"
    },
    blogger: {
      avatar: "/img/logo.png",
      name: "\u6781\u901Fcv",
      slogan: "CV\u64CD\u4F5C\u5C31\u662F\u597D~"
    },
    social: {
      icons: [
        {
          iconClass: "icon-github",
          title: "Star\u6211",
          link: "https://github.com/CatCatBug/fastcv-blog"
        },
        {
          iconClass: "icon-erji",
          title: "\u6709\u54C1\u4F4D\u7684\u6B4C\u5355",
          link: "https://music.163.com/playlist?id=5161366267"
        }
      ]
    },
    footer: {
      createYear: 2021,
      copyrightInfo: '\u6781\u901Fcv | <a href="https://beian.miit.gov.cn/" target="_blank" style="font-weight:normal">\u7CA4ICP\u59072022111699\u53F7-1</a> '
    },
    htmlModules: htmlModules_default
  },
  head: [
    ["link", { rel: "icon", href: "/img/favicon.ico" }],
    ["meta", { name: "keywords", content: "cv,fastcv,\u4E2A\u4EBA\u535A\u5BA2" }],
    ["meta", { name: "baidu-site-verification", content: "7F55weZDDc" }],
    ["meta", { name: "theme-color", content: "#7b074b" }],
    ["script", {
      "data-ad-client": "ca-pub-8621788234752924",
      async: true,
      src: "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8621788234752924",
      crossorigin: "anonymous"
    }]
  ],
  plugins: [
    "vuepress-plugin-baidu-autopush",
    "reading-progress",
    [
      "vuepress-plugin-baidu-tongji",
      {
        hm: baiduCode_default
      }
    ],
    "fulltext-search",
    [
      "one-click-copy",
      {
        copySelector: ['div[class*="language-"] pre', 'div[class*="aside-code"] aside'],
        copyMessage: "\u590D\u5236\u6210\u529F",
        duration: 1e3,
        showInMobile: false
      }
    ],
    [
      "demo-block",
      {
        settings: {
          jsfiddle: false,
          codepen: true,
          horizontal: false
        }
      }
    ],
    [
      "vuepress-plugin-zooming",
      {
        selector: ".theme-vdoing-content img:not(.no-zoom)",
        options: {
          bgColor: "rgba(0,0,0,0.6)"
        }
      }
    ],
    [
      "vuepress-plugin-comment",
      {
        choosen: "gitalk",
        options: {
          clientID: "6f97ead0ad58265e7b9d",
          clientSecret: "13cb77ec7655cc71161ab8fcc1cc53d963c9df2b",
          repo: "fastcv-blog",
          owner: "CatCatBug",
          admin: ["CatCatBug"],
          pagerDirection: "last",
          id: "<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",
          title: "\u300C\u8BC4\u8BBA\u300D<%- frontmatter.title %>",
          labels: ["Gitalk", "Comment"],
          body: "\u9875\u9762\uFF1A<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"
        }
      }
    ],
    [
      "@vuepress/last-updated",
      {
        transformer: (timestamp, lang) => {
          return new Date(timestamp).toLocaleDateString();
        }
      }
    ],
    [
      "sitemap",
      {
        hostname: "https://fastcv.cc"
      }
    ]
  ],
  markdown: {
    lineNumbers: true,
    extractHeaders: ["h2", "h3", "h4", "h5", "h6"]
  },
  extraWatchFiles: [
    ".vuepress/config.ts",
    ".vuepress/config/htmlModules.ts"
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
