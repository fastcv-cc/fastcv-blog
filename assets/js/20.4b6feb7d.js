(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{355:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("在昨天撸代码的过程中，涉及到了正则这个我不会的东西，于是，今天来学习下有关它的一些知识。")]),t._v(" "),a("p",[t._v("正则表达式定义了字符串的模式。")]),t._v(" "),a("p",[t._v("正则表达式可以用来搜索、编辑或处理文本。")]),t._v(" "),a("p",[t._v("正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。")]),t._v(" "),a("h3",{attrs:{id:"正则表达式实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式实例"}},[t._v("#")]),t._v(" 正则表达式实例")]),t._v(" "),a("p",[t._v('一个字符串其实就是一个简单的正则表达式，例如 Hello World 正则表达式匹配 "Hello World" 字符串。')]),t._v(" "),a("p",[t._v('.（点号）也是一个正则表达式，它匹配任何一个字符如："a" 或 "1"。')]),t._v(" "),a("p",[t._v("下表列出了一些正则表达式的实例及描述：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("正则表达式")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("this is text")]),t._v(" "),a("td",[t._v('匹配字符串 "this is text"')])]),t._v(" "),a("tr",[a("td",[t._v("this\\s+is\\s+text")]),t._v(" "),a("td",[t._v('注意字符串中的 \\s+。匹配单词 "this" 后面的 \\s+ 可以匹配多个空格，之后匹配 is 字符串，再之后 \\s+ 匹配多个空格然后再跟上 text 字符串。可以匹配这个实例：this is text')])])])]),t._v(" "),a("h4",{attrs:{id:"java-util-regex-包主要包括以下三个类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-util-regex-包主要包括以下三个类"}},[t._v("#")]),t._v(" java.util.regex 包主要包括以下三个类：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Pattern 类：\npattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。")])]),t._v(" "),a("li",[a("p",[t._v("Matcher 类：\nMatcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。")])]),t._v(" "),a("li",[a("p",[t._v("PatternSyntaxException：\nPatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。")])])]),t._v(" "),a("h5",{attrs:{id:"以下实例中使用了正则表达式-runoob-用于查找字符串中是否包了-runoob-子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以下实例中使用了正则表达式-runoob-用于查找字符串中是否包了-runoob-子串"}},[t._v("#")]),t._v(" 以下实例中使用了正则表达式 ."),a("em",[t._v("runoob.")]),t._v(" 用于查找字符串中是否包了 runoob 子串：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package regex;\n\nimport java.util.regex.Pattern;\n\npublic class LearnMain1 {\n\t\n\tpublic static void main(String[] args) {\n\t\tString content = "I am noob " +\n\t\t        "from runoob.com.";\n\t\tString pattern = ".*runoob.*";\n\t\tboolean isMatcher = Pattern.matches(pattern, content);\n\t\tSystem.out.println("字符串中是否包含了 \'runoob\' 子字符串? " + isMatcher);\n\t}\n\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("运行结果：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("字符串中是否包含了 'runoob' 子字符串? true\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"捕获组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获组"}},[t._v("#")]),t._v(" 捕获组")]),t._v(" "),a("p",[t._v("捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。")]),t._v(" "),a("p",[t._v('例如，正则表达式 (dog) 创建了单一分组，组里包含"d"，"o"，和"g"')]),t._v(" "),a("p",[t._v("捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：")]),t._v(" "),a("ul",[a("li",[t._v("((A)(B(C)))")]),t._v(" "),a("li",[t._v("(A)")]),t._v(" "),a("li",[t._v("(B(C))")]),t._v(" "),a("li",[t._v("(C)")])]),t._v(" "),a("p",[t._v("可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。")]),t._v(" "),a("p",[t._v("还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。")]),t._v(" "),a("h4",{attrs:{id:"实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),a("p",[t._v("下面的例子说明如何从一个给定的字符串中找到数字串：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package regex;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class LearnMain2 {\n\n\tpublic static void main(String[] args) {\n\t\t// 按指定模式在字符串查找\n\t      String line = "This order was placed for QT3000! OK?";\n\t      String pattern = "(\\\\D*)(\\\\d+)(.*)";\n\t      \n\t      Pattern r = Pattern.compile(pattern);\n\t      Matcher m = r.matcher(line);\n\t      int count = m.groupCount();\n\t      System.out.println("count = " + (count+1));\n\t      m.find();\n\t      for(int i=0;i<=count;i++) {\n\t    \t  System.out.println("Found value: " + m.group(i));\n\t      }\n\t}\n\t\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("h5",{attrs:{id:"运行结果为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行结果为"}},[t._v("#")]),t._v(" 运行结果为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("count = 4\nFound value: This order was placed for QT3000! OK?\nFound value: This order was placed for QT\nFound value: 3000\nFound value: ! OK?\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("？？？？？  wfk   为什么会出现这些东西？  怎么出现的？？？？    不理解呀！！？？？？")]),t._v(" "),a("h5",{attrs:{id:"先不急-让我们带着疑问去看看发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#先不急-让我们带着疑问去看看发生了什么"}},[t._v("#")]),t._v(" 先不急，让我们带着疑问去看看发生了什么？？？？")]),t._v(" "),a("h3",{attrs:{id:"正则表达式语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式语法"}},[t._v("#")]),t._v(" 正则表达式语法")]),t._v(" "),a("p",[t._v("在其他语言中，\\\\ 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。")]),t._v(" "),a("p",[t._v("在 Java 中，\\\\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。")]),t._v(" "),a("p",[t._v("所以，在其他的语言中（如Perl），一个反斜杠 \\ 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 \\\\ 代表其他语言中的一个 \\，这也就是为什么表示一位数字的正则表达式是 \\\\d，而表示一个普通的反斜杠是 \\\\\\\\。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\")]),t._v(" "),a("td",[t._v('将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，"n"匹配字符"n"。"\\n"匹配换行符。序列"\\\\"匹配"\\"，"\\("匹配"("。')])]),t._v(" "),a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v('匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与"\\n"或"\\r"之后的位置匹配。')])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v('匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与"\\n"或"\\r"之前的位置匹配。')])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("零次或多次匹配前面的字符或子表达式。例如，zo"),a("em",[t._v('匹配"z"和"zoo"。')]),t._v(" 等效于 {0,}。")])]),t._v(" "),a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v('一次或多次匹配前面的字符或子表达式。例如，"zo+"与"zo"和"zoo"匹配，但与"z"不匹配。+ 等效于 {1,}。')])]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v('零次或一次匹配前面的字符或子表达式。例如，"do(es)?"匹配"do"或"does"中的"do"。? 等效于 {0,1}。')])]),t._v(" "),a("tr",[a("td",[t._v("{n}")]),t._v(" "),a("td",[t._v('n 是非负整数。正好匹配 n次。例如，"o{2}"与"Bob"中的"o"不匹配， 但与"food"中的两个"o"匹配。')])]),t._v(" "),a("tr",[a("td",[t._v("{n,}")]),t._v(" "),a("td",[t._v('n 是非负整数。至少匹配 n次。例如，"o{2,}"不匹配"Bob"中的"o"， 而匹配"foooood"中的所有 o。"o{1,}"等效于"o+"。"o{0,}"等效于"o*"。')])]),t._v(" "),a("tr",[a("td",[t._v("{n,m}")]),t._v(" "),a("td",[t._v("m 和 n 是非负整数，其中 n <= m。匹配至少 n 次，至多 m 次。例如，\"o{1,3}\"匹配\"fooooood\"中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。")])]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v('当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是"非贪心的"。"非贪心的"模式匹配搜索到的、尽可能短的字符串，而默认的"贪心的"模式匹配搜索到的、尽可能长的字符串。例如，在字符串"oooo"中，"o+?"只匹配单个"o"，而"o+"匹配所有"o"。')])]),t._v(" "),a("tr",[a("td",[t._v(".")]),t._v(" "),a("td",[t._v('匹配除"\\r\\n"之外的任何单个字符。若要匹配包括"\\r\\n"在内的任意字符，请使用诸如"[\\s\\S]"之类的模式。')])]),t._v(" "),a("tr",[a("td",[t._v("(pattern)")]),t._v(" "),a("td",[t._v('匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果"匹配"集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用"\\("或者"\\)"。')])]),t._v(" "),a("tr",[a("td",[t._v("(?:pattern)")]),t._v(" "),a("td",[t._v("匹配 pattern 但不捕获该匹配的子表达式， 即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用\"or\"字符 (|) 组合模式部件的情况很有用。例如，'industr(?:y|ies) 是比 'industry|industries' 更经济的表达式。")])]),t._v(" "),a("tr",[a("td",[t._v("(?=pattern)")]),t._v(" "),a("td",[t._v('执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，\'Windows (?=95|98|NT|2000)\' 匹配"Windows 2000"中的"Windows"，但不匹配"Windows 3.1"中的"Windows" 。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。')])]),t._v(" "),a("tr",[a("td",[t._v("(?!pattern)")]),t._v(" "),a("td",[t._v('执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，\'Windows (?!95|98|NT|2000)\' 匹配"Windows 3.1"中的 "Windows"，但不匹配"Windows 2000"中的"Windows"。 预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。')])]),t._v(" "),a("tr",[a("td",[t._v("x|y")]),t._v(" "),a("td",[t._v('匹配 x 或 y。例如，\'z|food\' 匹配"z"或"food"。\'(z|f)ood\' 匹配"zood"或"food"。')])]),t._v(" "),a("tr",[a("td",[t._v("[xyz]")]),t._v(" "),a("td",[t._v('字符集。匹配包含的任一字符。例如，"[abc]"匹配"plain"中的"a"。')])]),t._v(" "),a("tr",[a("td",[t._v("[^xyz]")]),t._v(" "),a("td",[t._v('反向字符集。匹配未包含的任何字符。例如，"[^abc]"匹配"plain"中"p"，"l"，"i"，"n"。')])]),t._v(" "),a("tr",[a("td",[t._v("[a-z]")]),t._v(" "),a("td",[t._v('字符范围。匹配指定范围内的任何字符。例如，"[a-z]"匹配"a"到"z"范围内的任何小写字母。')])]),t._v(" "),a("tr",[a("td",[t._v("[^a-z]")]),t._v(" "),a("td",[t._v('反向范围字符。匹配不在指定的范围内的任何字符。例如，"[^a-z]"匹配任何不在"a"到"z"范围内的任何字符。')])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",[t._v('匹配一个字边界，即字与空格间的位置。例如，"er\\b"匹配"never"中的"er"，但不匹配"verb"中的"er"。')])]),t._v(" "),a("tr",[a("td",[t._v("\\B")]),t._v(" "),a("td",[t._v('非字边界匹配。"er\\B"匹配"verb"中的"er"，但不匹配"never"中的"er"。')])]),t._v(" "),a("tr",[a("td",[t._v("\\cx")]),t._v(" "),a("td",[t._v('匹配 x 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是"c"字符本身。')])]),t._v(" "),a("tr",[a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("数字字符匹配。等效于 [0-9]。")])]),t._v(" "),a("tr",[a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("非数字字符匹配。等效于 [^0-9]。")])]),t._v(" "),a("tr",[a("td",[t._v("\\f")]),t._v(" "),a("td",[t._v("换页符匹配。等效于 \\x0c 和 \\cL。")])]),t._v(" "),a("tr",[a("td",[t._v("\\n")]),t._v(" "),a("td",[t._v("换行符匹配。等效于 \\x0a 和 \\cJ。")])]),t._v(" "),a("tr",[a("td",[t._v("\\r")]),t._v(" "),a("td",[t._v("匹配一个回车符。等效于 \\x0d 和 \\cM。")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。")])]),t._v(" "),a("tr",[a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。")])]),t._v(" "),a("tr",[a("td",[t._v("\\t")]),t._v(" "),a("td",[t._v("制表符匹配。与 \\x09 和 \\cI 等效。")])]),t._v(" "),a("tr",[a("td",[t._v("\\v")]),t._v(" "),a("td",[t._v("垂直制表符匹配。与 \\x0b 和 \\cK 等效。")])]),t._v(" "),a("tr",[a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v('匹配任何字类字符，包括下划线。与"[A-Za-z0-9_]"等效。')])]),t._v(" "),a("tr",[a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v('与任何非单词字符匹配。与"[^A-Za-z0-9_]"等效。')])]),t._v(" "),a("tr",[a("td",[t._v("\\xn")]),t._v(" "),a("td",[t._v('匹配 n，此处的 n 是一个十六进制转义码。 十六进制转义码必须正好是两位数长。例如，"\\x41"匹配"A"。"\\x041"与"\\x04"&"1"等效。允许在正则表达式中使用 ASCII 代码。')])]),t._v(" "),a("tr",[a("td",[t._v("\\num")]),t._v(" "),a("td",[t._v('匹配 num，此处的 num 是一个正整数。 到捕获匹配的反向引用。 例如，"(.)\\1"匹配两个连续的相同字符。')])]),t._v(" "),a("tr",[a("td",[t._v("\\n")]),t._v(" "),a("td",[t._v("标识一个八进制转义码或反向引用。如果 \\n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n 是八进制转义码。")])]),t._v(" "),a("tr",[a("td",[t._v("\\nm")]),t._v(" "),a("td",[t._v("标识一个八进制转义码或反向引用。如果 \\nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \\nm 前面至少有 n 个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \\nm 匹配八进制值 nm，其中 n 和 m 是八进制数字 (0-7)。")])]),t._v(" "),a("tr",[a("td",[t._v("\\nml")]),t._v(" "),a("td",[t._v("当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，匹配八进制转义码 nml。")])]),t._v(" "),a("tr",[a("td",[t._v("\\un")]),t._v(" "),a("td",[t._v("匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。")])])])]),t._v(" "),a("h4",{attrs:{id:"解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释"}},[t._v("#")]),t._v(" 解释")]),t._v(" "),a("p",[t._v("看完这些密密麻麻的语法后，是不是感觉记不住，记不住就对了，我们来对照着找，首先：整条字符串为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("This order was placed for QT3000! OK?\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("然后，我们分组规则为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(\\\\D*)(\\\\d+)(.*)"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("从括号可以看出，整体被分为了4个组，因为0不记在count里面（所以加1）")]),t._v(" "),a("p",[t._v("第一组：整体")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("This order was placed for QT3000! OK?\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("第二组：\\\\D*")]),t._v(" "),a("p",[t._v("\\\\D 查表表示为 非数字字符匹配。等效于 [^0-9]。即，非数字就是这个组，所以，从前往后，到数字就停止")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("This order was placed for QT\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("第三组：\\\\d+")]),t._v(" "),a("p",[t._v("\\\\d+ 查表表示为 数字字符匹配。等效于 [0-9]。所以，从上一个组的后面开始，查找数字，碰到非数字停止")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("3000\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("第四组：.*")]),t._v(" "),a("p",[t._v('. 查表表示为 匹配除"\\r\\n"之外的任何单个字符。若要匹配包括"\\r\\n"在内的任意字符，请使用诸如"[\\s\\S]"之类的模式。')]),t._v(" "),a("p",[t._v('* 查表表示为 零次或多次匹配前面的字符或子表达式。例如，zo匹配"z"和"zoo"。 等效于 {0,}。')]),t._v(" "),a("p",[t._v("所以，接下来的所有字符都被打印出来了")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("! OK?\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h5",{attrs:{id:"在这过程中-有过几个疑问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在这过程中-有过几个疑问"}},[t._v("#")]),t._v(" 在这过程中，有过几个疑问：")]),t._v(" "),a("p",[t._v("1、\\r\\n是啥？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("在windos中可以理解为回车换行\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("2、匹配数字的话，如果后面还有数字怎么办，如这种：This order was placed for QT3000! OK? NO it is QT4300\n，那么，第三组会输出啥？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("经过试验，我得到，它会输出3000，而后面的4300不会输出，这就是为啥我前面说，遇到字母就停止匹配（字符相同）\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("3、*遇到空格会输出吗？如：This order was placed for QT3000 ! OK? NO it is QT4300，这样子，会输出前面的空格吗？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("答案是-------是的，会输出\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("4、为啥会跟着前面已经匹配的字符串后面去匹配？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("我猜的话，有个定位的标志\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"matcher-类的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matcher-类的方法"}},[t._v("#")]),t._v(" Matcher 类的方法")]),t._v(" "),a("p",[t._v("前面，我们用到了这个类，这个时候来了解下它")]),t._v(" "),a("h4",{attrs:{id:"索引方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引方法"}},[t._v("#")]),t._v(" 索引方法")]),t._v(" "),a("p",[t._v("索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("public int start()")]),t._v(" "),a("td",[t._v("返回以前匹配的初始索引。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("public int start(int group)")]),t._v(" "),a("td",[t._v("返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("public int end()")]),t._v(" "),a("td",[t._v("返回最后匹配字符之后的偏移量。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("public int end(int group)")]),t._v(" "),a("td",[t._v("返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。")])])])]),t._v(" "),a("p",[t._v("学到这里，我们就知道了，原来是有个索引的存在")]),t._v(" "),a("h4",{attrs:{id:"研究方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#研究方法"}},[t._v("#")]),t._v(" 研究方法")]),t._v(" "),a("p",[t._v("研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("public boolean lookingAt()")]),t._v(" "),a("td",[t._v("尝试将从区域开头开始的输入序列与该模式匹配。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("public boolean find()")]),t._v(" "),a("td",[t._v("尝试查找与该模式匹配的输入序列的下一个子序列。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("public boolean find(int start）")]),t._v(" "),a("td",[t._v("重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("public boolean matches()")]),t._v(" "),a("td",[t._v("尝试将整个区域与模式匹配。")])])])]),t._v(" "),a("h4",{attrs:{id:"替换方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替换方法"}},[t._v("#")]),t._v(" 替换方法")]),t._v(" "),a("p",[t._v("替换方法是替换输入字符串里文本的方法：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("public Matcher appendReplacement(StringBuffer sb, String replacement)")]),t._v(" "),a("td",[t._v("实现非终端添加和替换步骤。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("public StringBuffer appendTail(StringBuffer sb)")]),t._v(" "),a("td",[t._v("实现终端添加和替换步骤。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("public String replaceAll(String replacement)")]),t._v(" "),a("td",[t._v("替换模式与给定替换字符串相匹配的输入序列的每个子序列。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("public String replaceFirst(String replacement)")]),t._v(" "),a("td",[t._v("替换模式与给定替换字符串匹配的输入序列的第一个子序列。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("public static String quoteReplacement(String s)")]),t._v(" "),a("td",[t._v("返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的appendReplacement 方法一个字面字符串一样工作。")])])])]),t._v(" "),a("h5",{attrs:{id:"start-和-end-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-和-end-方法"}},[t._v("#")]),t._v(" start 和 end 方法")]),t._v(" "),a("p",[t._v('下面是一个对单词 "cat" 出现在输入字符串中出现次数进行计数的例子：')]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package regex;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class LearnMain2 {\n\n\tprivate static final String REGEX = "\\\\bcat\\\\b";\n    private static final String INPUT =\n                                    "cat cat cat cattie cat";\n \n    public static void main( String args[] ){\n       Pattern p = Pattern.compile(REGEX);\n       Matcher m = p.matcher(INPUT); // 获取 matcher 对象\n       int count = 0;\n \n       while(m.find()) {\n         count++;\n         System.out.println("Match number "+count);\n         System.out.println("start(): "+m.start());\n         System.out.println("end(): "+m.end());\n      }\n   }\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("p",[t._v("运行结果为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Match number 1\nstart(): 0\nend(): 3\nMatch number 2\nstart(): 4\nend(): 7\nMatch number 3\nstart(): 8\nend(): 11\nMatch number 4\nstart(): 19\nend(): 22\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v('可以看到这个例子是使用单词边界，以确保字母 "c" "a" "t" 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。')]),t._v(" "),a("p",[t._v("Start 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。")]),t._v(" "),a("h5",{attrs:{id:"matches-和-lookingat-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matches-和-lookingat-方法"}},[t._v("#")]),t._v(" matches 和 lookingAt 方法")]),t._v(" "),a("p",[t._v("matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。")]),t._v(" "),a("p",[t._v("lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。")]),t._v(" "),a("p",[t._v("这两个方法经常在输入字符串的开始使用。")]),t._v(" "),a("p",[t._v("我们通过下面这个例子，来解释这个功能：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package regex;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class LearnMain2 {\n\n\tprivate static final String REGEX = "foo";\n    private static final String INPUT = "fooooooooooooooooo";\n    private static final String INPUT2 = "ooooofoooooooooooo";\n    private static Pattern pattern;\n    private static Matcher matcher;\n    private static Matcher matcher2;\n \n    public static void main( String args[] ){\n       pattern = Pattern.compile(REGEX);\n       matcher = pattern.matcher(INPUT);\n       matcher2 = pattern.matcher(INPUT2);\n \n       System.out.println("Current REGEX is: "+REGEX);\n       System.out.println("Current INPUT is: "+INPUT);\n       System.out.println("Current INPUT2 is: "+INPUT2);\n \n \n       System.out.println("lookingAt(): "+matcher.lookingAt());\n       System.out.println("matches(): "+matcher.matches());\n       System.out.println("lookingAt(): "+matcher2.lookingAt());\n   }\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])]),a("p",[t._v("运行结果为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Current REGEX is: foo\nCurrent INPUT is: fooooooooooooooooo\nCurrent INPUT2 is: ooooofoooooooooooo\nlookingAt(): true\nmatches(): false\nlookingAt(): false\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h5",{attrs:{id:"replacefirst-和-replaceall-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replacefirst-和-replaceall-方法"}},[t._v("#")]),t._v(" replaceFirst 和 replaceAll 方法")]),t._v(" "),a("p",[t._v("replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。")]),t._v(" "),a("p",[t._v("下面的例子来解释这个功能：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package regex;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class LearnMain2 {\n\n\tprivate static String REGEX = "dog";\n    private static String INPUT = "The dog says meow. " +\n                                    "All dogs say meow.";\n    private static String REPLACE = "cat";\n \n    public static void main(String[] args) {\n       Pattern p = Pattern.compile(REGEX);\n       // get a matcher object\n       Matcher m = p.matcher(INPUT); \n       INPUT = m.replaceAll(REPLACE);\n       System.out.println(INPUT);\n   }\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("运行结果为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("The cat says meow. All cats say meow.\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h5",{attrs:{id:"appendreplacement-和-appendtail-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#appendreplacement-和-appendtail-方法"}},[t._v("#")]),t._v(" appendReplacement 和 appendTail 方法")]),t._v(" "),a("p",[t._v("Matcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：")]),t._v(" "),a("p",[t._v("看下面的例子来解释这个功能：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package regex;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class LearnMain2 {\n\n\tprivate static String REGEX = "a*b";\n\t   private static String INPUT = "aabfooaabfooabfoobkkk";\n\t   private static String REPLACE = "-";\n\t   public static void main(String[] args) {\n\t      Pattern p = Pattern.compile(REGEX);\n\t      // 获取 matcher 对象\n\t      Matcher m = p.matcher(INPUT);\n\t      StringBuffer sb = new StringBuffer();\n\t      while(m.find()){\n\t         m.appendReplacement(sb,REPLACE);\n\t      }\n\t      m.appendTail(sb);\n\t      System.out.println(sb.toString());\n\t   }\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("p",[t._v("运行结果为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-foo-foo-foo-kkk\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"patternsyntaxexception-类的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patternsyntaxexception-类的方法"}},[t._v("#")]),t._v(" PatternSyntaxException 类的方法")]),t._v(" "),a("p",[t._v("PatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。")]),t._v(" "),a("p",[t._v("PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("public String getDescription()")]),t._v(" "),a("td",[t._v("获取错误的描述。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("public int getIndex()")]),t._v(" "),a("td",[t._v("获取错误的索引。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("public String getPattern()")]),t._v(" "),a("td",[t._v("获取错误的正则表达式模式。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("public String getMessage()")]),t._v(" "),a("td",[t._v("返回多行字符串，包含语法错误及其索引的描述、错误的正则表达式模式和模式中错误索引的可视化指示。")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);