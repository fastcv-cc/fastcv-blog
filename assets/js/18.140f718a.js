(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{353:function(s,t,n){"use strict";n.r(t);var a=n(1),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),t("p",[s._v("我们很多时候是不知道一个类的内部是如何实现的，但是我们需要用到它的一些方法，这个时候怎么办咧，我们这个时候就需要用到反射来得到我们需要的东西了。")]),s._v(" "),t("h3",{attrs:{id:"怎么得到class的对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么得到class的对象"}},[s._v("#")]),s._v(" 怎么得到Class的对象")]),s._v(" "),t("p",[s._v("Class的实例对象就是内存中的一份字节码，或者说内存中的一份字节码对应Class的一个实例对象。现在解释一下什么是字节码？")]),s._v(" "),t("p",[s._v("我们常说JAVA编译后，会变成.class文件，而这里所说的字节码就是一个类编译而成的二进制代码，比如：")]),s._v(" "),t("p",[s._v("要得到Person对象时，是要先得到Person类的一份字节码（如果JVM中没有，需要先加载，如果有，可以直接返回）;")]),s._v(" "),t("p",[s._v("要得到Set对象时，是要先得到Set类的一份字节码;")]),s._v(" "),t("p",[s._v("要得到Math对象时，是要先得到Math类的一份字节码。")]),s._v(" "),t("p",[s._v("注意：每个类的字节码，在内存中只有一份，每一份字节码就是一个Class的实例对象，比如要得到Person的字节码，可以有下面三种写法")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('Class p=Person.class; \n“Person.class”就代表Person的字节码，“Person.class”的所属类型的Class\n\nClass.forName("类的全路径名");\n\n对象名.getClass();\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    String str = "abc";\n\t\t\n\t//first way to get the class\n\tClass cls = String.class;\n\t\t\n\t//second way to get the class\n\tClass cls2 = str.getClass();\n\t\t\n\t//thirdly way to get the class\n\tClass cls3 = Class.forName("java.lang.String");\n\t\t\n\tClass cls4 = char.class;\n\tSystem.out.println("The result:");\n\tSystem.out.println(cls == cls2);\n\tSystem.out.println(cls == cls3);\n\tSystem.out.println(cls.isPrimitive());\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("运行结果为：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("The result:\ntrue\ntrue\nfalse\ntrue\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("从结果可以看出，每个类的字节码，在内存中只有一份，无论你用三种方式的哪一种方式去取，得到的都是同一份字节码")]),s._v(" "),t("h3",{attrs:{id:"基本类型的字节码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的字节码"}},[s._v("#")]),s._v(" 基本类型的字节码")]),s._v(" "),t("p",[s._v("Java中有八种基本类型，所对应的字节码是基本数据类型的字节码，在程序中，可以种Class的isPrimitive()方法来判断它是不是基本数据类型的字节码。")]),s._v(" "),t("p",[s._v("值得一提的是，int[].class这不是基本数据类型的字节码，因为这是数组类型，当调用isArray的时候返回true。")]),s._v(" "),t("p",[s._v("说了这么多，还是没有看到关于反射的字眼，现在我们就开始谈谈反射")]),s._v(" "),t("h2",{attrs:{id:"反射深入分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射深入分析"}},[s._v("#")]),s._v(" 反射深入分析")]),s._v(" "),t("h3",{attrs:{id:"什么是反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[s._v("#")]),s._v(" 什么是反射？")]),s._v(" "),t("p",[s._v("定义：反射就是把JAVA类中的各种成分映射成映射成相应的JAVA类。")]),s._v(" "),t("p",[s._v("我们知道，一个类中可以有成员变量，成员方法，构造方法等信息，这些信息就用相应的类的实例对象来表示。")]),s._v(" "),t("p",[s._v("在反射中，有一些类用来表示反射以后类中的成分，比如：Filed，Method，Constructor,Package。")]),s._v(" "),t("p",[s._v("比如：System类中，有System.exit(),System.getProperties(),不管你的类中有什么方法，都可以用反射中Method来表示。")]),s._v(" "),t("p",[s._v("我们知道，一个类中可以有成员变量，成员方法，构造方法等信息，这些信息就用相应的类的实例对象来表示。")]),s._v(" "),t("p",[s._v("在反射中，有一些类用来表示反射以后类中的成分，比如：Filed，Method，Constructor,Package。")]),s._v(" "),t("p",[s._v("首先，我们从类的入口出发，开始学习反射")]),s._v(" "),t("h4",{attrs:{id:"类构造函数的反射-constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类构造函数的反射-constructor"}},[s._v("#")]),s._v(" 类构造函数的反射 Constructor")]),s._v(" "),t("p",[s._v("Constructor代表某一个类的构造方法 那么怎么得到一个类的构造方法？ 可以先拿到这个类的CLass实例对象（这个类的字节码），实例对象中有两个方法。 得到类的一个构造函数的方法")]),s._v(" "),t("p",[s._v("public Constructor"),t("T",[s._v(" getConstructor(Class<?>... parameterTypes) throws NoSuchMethodException,SecurityException")])],1),s._v(" "),t("p",[s._v("通过参数类型，得到想要的构造函数，因为接收的是可变参数，所以可以传多个，比如：想得到String的String（StringBuffer buf）的构造方法，可以这么写：StringString.class.getConstructor(StringBuffer.class);")]),s._v(" "),t("p",[s._v("如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    Constructor<String> construct =\n\tString.class.getConstructor(StringBuffer.class);\n\tConstructor<String> construct1 = String.class.getConstructor(char[].class);\n\tString result = construct1.newInstance(new char[]{'a','b','v'});\n\tSystem.out.println(result);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("运行结果")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("abv\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"类成员变量的反射-filed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类成员变量的反射-filed"}},[s._v("#")]),s._v(" 类成员变量的反射 Filed")]),s._v(" "),t("p",[s._v("如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class Point{\n\tprivate int x;\n\tpublic int y;\n\tpublic Point(int x, int y) {\n\t\tsuper();\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\t}\n}\n\npublic static void main(String[] args) throws Exception {\n\t\t\t\t\n\t\tPoint p1=new Point(5, 39);\n\t\tPoint p2=new Point(3, 9);\n\t\t\t\t\t</span>\n\t\t<span style="font-size:14px;">//对公有成员变量\n\t\tField fieldY = p1.getClass().getField("y");\t\n\t\tint y = (int) fieldY.get(p1);//取对应p1对象的y字段的值，必须要有对象。\n\t\tSystem.out.println(y);\n\t\t\t\t\n\t\t//对私有成员变量，可以进行暴力反射\n\t\tField fieldX = p1.getClass().getDeclaredField("x");\n\t\tfieldX.setAccessible(true);//暴力反射\n\t\tint x = (int) fieldX.get(p1);//取对应p1对象的x字段的值\n\t\tSystem.out.println(x);\t\t\t\t\n\t\t}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("又或者这样")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class Person{\n\tprivate String name;\n\tprivate int age ;\n\tprivate String nickName;\n\tpublic Person(String name, int age, String nickName) {\n\t\t super();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.nickName = nickName;\n\t\t}\n\t\t\t\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\t return "Person [name=" + name + ", age=" + age + ", nickName="+ nickName + "]";\n\t\t}\n}\n\npublic static void main(String[] args) throws Exception {\n\t\t\t\t\t\t\n\t\tPerson p=new Person("zhangsan", 25, "Amao");\t\t\n\t\t//得到字节码,通过字节码得到这个类的所有方法\n\t\tField[] fields = p.getClass().getDeclaredFields();\n\t\t\tfor(Field field:fields){\n\t\t\t//因为一个类的字节码在内存中只有一份，所以用==比较更专业，此处用==，不用equals（）\n\t\t\t\tif(field.getType()==String.class){\n\t\t\t\t\tfield.setAccessible(true);//进行暴力反射\n\t\t\t\t\tString oldValue = (String) field.get(p);//获得字段的值\n\t\t\t\t\tString newValue =oldValue.replace("a", "A");\n\t\t\t\t\tfield.set(p, newValue);\n\t\t\t\t\tSystem.out.println(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("h4",{attrs:{id:"类成员方法的反射-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类成员方法的反射-method"}},[s._v("#")]),s._v(" 类成员方法的反射 Method")]),s._v(" "),t("p",[s._v("比如：想调用String类中的chatAt(int i)这个方法，该怎么么办呢？ public Method getMethod(String name, Class<?>... parameterTypes)hrows NoSuchMethodException,SecurityException")]),s._v(" "),t("p",[s._v('参数说明： name：这个表示方法的名字 parameterTypes：这个参数的作用表示调用哪个方法，因为重载的原因，一个类中同名的方法可能不止一个 对于上面的问题，我们可以这样做。 Method myStrCharAt=String.class.getMethod("charAt",int.class);')]),s._v(" "),t("p",[s._v("如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class MethodReflect {\n \n\tpublic static void main(String[] args) throws Exception{\n\t\tString str="abcdef";\n\t\t\t\t\n\t\tMethod strMethod = str.getClass().getMethod("charAt", int.class);\n\t\t\t\t\n\t\t//得到方法之后，调用对象str的chatAt方法；\n\t\tchar result = (char) strMethod.invoke(str, 1);\n\t\t\t\n\t\tSystem.out.println(result);//结果是b\n\t}\n }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("当一个类XXX，我们已经通过反射得到它的方法xxxMethod，那么看下面一行代码 xxxMethod.invoke(null, 1);")]),s._v(" "),t("p",[s._v("这表示不知道谁的xxxMethod方法，因为传递的是null，说明调用的这个方法是属于类的，就是静态方法，所以就不需要传递参数了。")]),s._v(" "),t("h5",{attrs:{id:"数组与反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组与反射"}},[s._v("#")]),s._v(" 数组与反射")]),s._v(" "),t("p",[s._v("数组在 Java 语言中是一种特殊的类类型，一个数组的引用可以赋给 Object 引用。观察下面的例子看看数组是怎么工作的：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import java.lang.reflect.*;  \npublic class Array1 { \n   public static void main(String args[]) { \n      try { \n           Class cls = Class.forName("java.lang.String"); \n           Object arr = Array.newInstance(cls, 10); \n           Array.set(arr, 5, "this is a test"); \n           String s = (String) Array.get(arr, 5); \n           System.out.println(s); \n      } \n      catch (Throwable e) { \n           System.err.println(e); \n      } \n   } \n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("例中创建了 10 个单位长度的 String 数组，为第 5 个位置的字符串赋了值，最后将这个字符串从数组中取得并打印了出来。")])])}),[],!1,null,null,null);t.default=e.exports}}]);