(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{364:function(e,n,r){"use strict";r.r(n);var s=r(1),t=Object(s.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),n("p",[e._v("ontentProvider是Android四大组件之一，其本质上是一个标准化的数据管道，它屏蔽了底层的数据管理和服务等细节。")]),e._v(" "),n("p",[e._v("主要用于在不同应用程序之间实现数据共享的功能，允许一个程序访问另一个程序中的数据，同时还能保证被访问数据的安全性。")]),e._v(" "),n("p",[e._v("Content Provider维护特定的应用数据，并可以让其它应用轻松访问该数据。")]),e._v(" "),n("p",[e._v("对数据使用者来说它是数据提供者。它提供统一的接口对数据进行操作，使用者不用关心数据到底是如何存储的以及数据类型到底是什么,用户可以灵活实现ContentProvider所封装的数据存储以及增删改查等，所有的ContentProvider 必须实现一个对外统一的接口（URI）。")]),e._v(" "),n("p",[e._v("比如我们的APP去访问通讯录，日历，短信等。")]),e._v(" "),n("p",[e._v("Uri类似http url, 构成如下：content://authority/path，所有Content Provider的Uri必须以content://开头（#匹配一个数字字符串，*匹配一个文本字符串。）")]),e._v(" "),n("p",[e._v("authority是个字符串，它由开发者自己定义，用于来唯一标示一个ContentProvider。系统会根据这个标示查找ContentProvider。")]),e._v(" "),n("p",[e._v("path也是字符串，表示要操作的数据，可根据自己的实现逻辑来指定：")]),e._v(" "),n("blockquote",[n("p",[e._v("content://contacts/people 表示要操作ContentProvider为contacts下的people表。\ncontent://com.android.contacts/people/# 表示要操作表people中特定id的行(记录)。\ncontent://downloads/download/10/name 表示要操作id为10的行的name字段。\ncontent://downloads/download/* 表示操作download表中的所有字段。")])]),e._v(" "),n("p",[e._v("有文章单独介绍URI。")]),e._v(" "),n("p",[e._v("内容提供者就是"),n("code",[e._v("contentProvider")]),e._v("，作用有如下：")]),e._v(" "),n("ol",[n("li",[e._v("给多个应用提供数据")]),e._v(" "),n("li",[e._v("类似一个接口")]),e._v(" "),n("li",[e._v("可以和多个应用分享数据")])]),e._v(" "),n("p",[e._v("结合上面的说法，内容提供者大体可以分为两个方向：")]),e._v(" "),n("ul",[n("li",[e._v("提供者")]),e._v(" "),n("li",[e._v("使用者")])]),e._v(" "),n("h1",{attrs:{id:"提供者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提供者"}},[e._v("#")]),e._v(" 提供者")]),e._v(" "),n("h2",{attrs:{id:"基本用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),n("h3",{attrs:{id:"_1、实现contentprovider抽象类-并实现相关方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、实现contentprovider抽象类-并实现相关方法"}},[e._v("#")]),e._v(" "),n("strong",[e._v("1、实现ContentProvider抽象类，并实现相关方法")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class UserProvider extends ContentProvider {\n\n    private static final String TAG = "UserProvider";\n    private UserDatabaseHelper dbh;\n    private static UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n    private static final int USER_MATCH_CODE = 1;\n    static {\n        uriMatcher.addURI("top.woodwhale.picgo","user",USER_MATCH_CODE);\n    }\n\n    @Override\n    public boolean onCreate() {\n        dbh = new UserDatabaseHelper(getContext());\n        return false;\n    }\n\n    @Nullable\n    @Override\n    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {\n        int res = uriMatcher.match(uri);\n        // 匹配规则\n        if (res == USER_MATCH_CODE) {\n            SQLiteDatabase db = dbh.getWritableDatabase();\n            return db.query(Constants.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder);\n        } else {\n            throw new IllegalArgumentException("参数错误！");\n        }\n    }\n\n    @Nullable\n    @Override\n    public String getType(@NonNull Uri uri) {\n        return null;\n    }\n\n    @Nullable\n    @Override\n    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {\n        int res = uriMatcher.match(uri);\n        if (res == USER_MATCH_CODE) {\n            SQLiteDatabase db = dbh.getWritableDatabase();\n            long insertRes = db.insert(Constants.TABLE_NAME, null, values);\n            Uri resUri = Uri.parse("content://top.woodwhale.picgo/user/"+insertRes);\n            Log.d(TAG,"insertRes --\x3e "+ insertRes);\n            // 插入数据成功，数据变化了，需要通知其他地方\n            getContext().getContentResolver().notifyChange(resUri,null);\n            return resUri;\n        } else {\n            throw new IllegalArgumentException("参数错误！");\n        }\n    }\n\n    @Override\n    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {\n        return 0;\n    }\n\n    @Override\n    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {\n        return 0;\n    }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br")])]),n("p",[e._v("一个具有内容提供者的APP中必须得有如下的类：")]),e._v(" "),n("ul",[n("li",[e._v("该类继承"),n("code",[e._v("ContentProvider")]),e._v("，并且重写其中的方法（增删改查）")]),e._v(" "),n("li",[e._v("赋予一个"),n("code",[e._v("UriMatcher")]),e._v("对象的成员变量")]),e._v(" "),n("li",[e._v("进行一个Uri的匹配，"),n("code",[e._v("authorities要和manifest中的一致")]),e._v("，并且可以选择表进行内容共提供。这些都在静态代码块中实现，使用"),n("code",[e._v("addURI")]),e._v("方法即可")]),e._v(" "),n("li",[n("code",[e._v("重写增删改查")]),e._v("方法，前提是Uri匹配！")])]),e._v(" "),n("p",[e._v("注意的是：ContentResolver中的CRUD操作方法都不是接收表名，而是使用一个Uri参数代替，这个参数被称为内容URI，它由两部分组成：authority和path。Authority是用于对不同的应用程序做区分的。Path是用于对同一应用程序中不同的两张表。如：content://com.example.app.privoder/table1。")]),e._v(" "),n("h3",{attrs:{id:"_2、清单注册"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、清单注册"}},[e._v("#")]),e._v(" "),n("strong",[e._v("2、清单注册")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<provider\n            android:authorities="top.woodwhale.picgo"\n            android:name=".test.contentprovider.provider.UserProvider"\n            android:exported="true"\n            android:enabled="true"\n            android:grantUriPermissions="true"/>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("ul",[n("li",[n("code",[e._v("authorities")]),e._v("可以是包名")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v("就是自己定义的名字")]),e._v(" "),n("li",[n("code",[e._v("exported=true")]),e._v("可以让其他的APP来访问自己提供的内容")])]),e._v(" "),n("p",[e._v("这样子，别人就可以通过我们定义的 "),n("strong",[e._v("authorities + 表名")]),e._v(" 来操作我们应用的数据库了。")]),e._v(" "),n("h3",{attrs:{id:"_3、数据变更通知与监听"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、数据变更通知与监听"}},[e._v("#")]),e._v(" "),n("strong",[e._v("3、数据变更通知与监听")])]),e._v(" "),n("p",[e._v("ContentProvider支持多进程访问，当一个进程操作ContentProvider变更数据之后，可能希望其他进程能收到通知，比如进程A往数据库插入了一条聊天信息，希望在进程B的UI中展现出来，这个时候就需要一个通知机制，Android也是提供了支持，不过它是一个通用的数据变更同步通知：基于ContentService服务：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\x3c!--1 注册--\x3e\npublic static void registerObserver(ContentObserver contentObserver) {\n\tContentResolver contentResolver = AppProfile.getAppContext().getContentResolver();\n\tcontentResolver.registerContentObserver(FileContentProvider.CONTENT_URI, true, contentObserver);\n}\n\n\x3c!--2 通知--\x3e\ncontentResolver.notifyChange(FileContentProvider.CONTENT_URI, null)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("h1",{attrs:{id:"使用者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用者"}},[e._v("#")]),e._v(" 使用者")]),e._v(" "),n("p",[e._v("ContentProvider将数据发布出来，通过ContentResolver对象结合Uri进行调用，通过ContentResolver对象可以调用ContentProvider的增删改查。")]),e._v(" "),n("h2",{attrs:{id:"读写日历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读写日历"}},[e._v("#")]),e._v(" 读写日历")]),e._v(" "),n("p",[e._v("在很多的情况下，我们会将一些事情写入到我们手机中的“日历”中，当到了预定的时间就会提醒，那么设置一个日历提醒事件怎么做到呢？——我们可以使用安卓开发给定的"),n("code",[e._v("CalendarContract")]),e._v("进行完成")]),e._v(" "),n("p",[n("code",[e._v("CalendarContract")]),e._v('是日历内容提供者和APP之间的一个合同，当我们的APP获取了读、写日历的权限之后，就可以对手机自带的这个"日历APP"进行添加事件的操作。')]),e._v(" "),n("h2",{attrs:{id:"读取联系人"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读取联系人"}},[e._v("#")]),e._v(" 读取联系人")]),e._v(" "),n("h1",{attrs:{id:"多进程的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多进程的问题"}},[e._v("#")]),e._v(" 多进程的问题")]),e._v(" "),n("p",[n("strong",[e._v("ContentProvider")]),e._v("标签有 "),n("strong",[e._v("android:multiprocess")]),e._v("  和 "),n("strong",[e._v("android:process")]),e._v(" 这两个标签。")]),e._v(" "),n("p",[e._v("我们知道默认不指定android:process的话，provider组件所在的进程名就是包名，multiprocess默认为false，则provider会随着应用启动的时候加载。如果对provider指定android:process和android:multiprocess，那么会产生如下几种情况：")]),e._v(" "),n("ul",[n("li",[e._v('android:process=":fore"，android:multiprocess="true"：provider不会随应用的启动而加载，当调用到provider的时候才会加载，加载时provider是在调用者的进程中初始化的。这时候可能定义provider的fore进程还没有启动。')]),e._v(" "),n("li",[e._v('android:process=":fore"（android:multiprocess默认情况下为"false"）：provider不会随应用的启动而加载，当调用到provider的时候才会加载，加载时provider是在“fore”进程中初始化的。')]),e._v(" "),n("li",[e._v('android:multiprocess="true"：provider会随着应用启动的时候加载，加载时provider是在应用默认主进程中初始化的。对于android:multiprocess=true，意味着provider可以多实例，那么由调用者在自己的进程空间实例化一个ContentProvider对象，此时定义ContentProvider的App可能并没有启动。')]),e._v(" "),n("li",[e._v('android:multiprocess="false"：provider会随着应用启动的时候加载，加载时provider是在应用默认主进程中初始化的。对于android:multiprocess=false（默认值），由系统把定义该ContentProvider的App启动起来(一个独立的Process)并实例化ContentProvider，这种ContentProvider只有一个实例，运行在自己App的Process中。所有调用者共享该ContentProvider实例，调用者与ContentProvider实例位于两个不同的Process。')])]),e._v(" "),n("p",[e._v("总之，android:multiprocess 应该理解为：是否允许在调用者的进程里实例化provider，而跟定义它的进程没有关系。")]),e._v(" "),n("h1",{attrs:{id:"初始化流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化流程"}},[e._v("#")]),e._v(" 初始化流程")])])}),[],!1,null,null,null);n.default=t.exports}}]);